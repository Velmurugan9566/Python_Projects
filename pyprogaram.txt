#program for exception handler routines
#zero division error
try:
    num1=int(input('Enter the Numerater: '))
    num2=int(input('Enter the denaminater: '))
    div=num1//num2
    print('Division of two numbers :',div)
except ZeroDivisionError:
    print('!!..Zero division is not passible..')
except:
    print('!!...Some error has occured..')


#file access error
try:
    fname=input('Enter the file name:')
    f=open(fname,'r')
    print(f.read())
except IOError:
    print('!!...File not found')


#list index out of range
try:
    li=[]
    n=int(input('Enter the no of element:'))
    for i in range(n):
        e=int(input('Enter the Elements: '))
        li.append(e)
    print(li)
    ch=int(input('Enter the index number you want view the element: '))
    print('Index no:{}:{}'.format(ch,li[ch]))
except IndexError:
    print('oops..!!! List index out of range..')
except:
    print('!..some error has occoured..')
    
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# Step 1: Read the data from a CSV file
data = pd.read_csv('student_marks.csv')  # Replace 'student_marks.csv' with your file path

# Step 2: Create a boxplot to visualize the data
plt.figure(figsize=(8, 6))
plt.boxplot(data['Marks'], vert=0)
plt.title('Student Performance in Annual Examination')
plt.xlabel('Marks')
plt.show()

# Step 3: Detect and identify outliers
Q1 = data['Marks'].quantile(0.25)
Q3 = data['Marks'].quantile(0.75)
IQR = Q3 - Q1


lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR


outliers = data[(data['Marks'] < lower_bound) | (data['Marks'] > upper_bound)]

print("Outliers:")
print(outliers)

class ATMCard:
    def __init__(self, card_number,name, pin, balance):
        self.card_number = card_number
        self.name =name
        self.pin = pin
        self.balance = balance
        self.attempts = 0

    def swipe_card(self, entered_pin, amount):
        if self.attempts >= 3:
            self.calling_police()
            return "Account is locked due to too many wrong PIN attempts. Police have been notified."
        
        if entered_pin == self.pin:
            if amount > self.balance:
                return "Insufficient balance."
            self.balance -= amount
            return "Withdrew ",amount," from your account. Available balance: ",self.balance
        else:
            self.attempts += 1
            return "Wrong PIN!!!. Attempts remaining: ",3 - self.attempts

    def check_balance(self, entered_pin):
        if entered_pin == self.pin:
            return "Your account balance is ",self.balance
        else:
            return "Wrong PIN. Please enter the correct PIN to check your balance."

    def calling_police(self):
        print("!!!..Calling the police to report... a potential ATM card theft or misuse!!!.")




try:
    print('Enter your details..')
    no=input('Enter your account NO: ')
    name=input('Enter your name: ')
    pin=int(input('Set a pin number(4digit): '))
    balance=int(input('Enter the balance amount: '))
    atm_card = ATMCard(no,name,pin,balance)# Create an ATM card instance
        
    while True:
        ch=int(input('\nEnter your choice: \n1.Swipe card \n2.check balance \n3.Exit'))
        if ch==1:
            apin=int(input('Enter your pin no: '))
            abalance=int(input('Enter amount you want to withdraw: '))
            print(atm_card.swipe_card(apin,abalance))
        elif ch==2:
            apin=int(input('Enter your pin no: '))
            print(atm_card.check_balance(apin))
        elif ch==3:
            exit()
        else:
            print('Entet valid choice...')
except IOError:
    print('Somethink wants to wrong..')


from abc import ABC, abstractmethod

# Abstract Shop class
class Shop(ABC):
    def __init__(self, name):
        self.name = name

    @abstractmethod
    def show_menu(self):
        pass
        

    @abstractmethod
    def make_bill(self, order):
        pass

# Derived class Mobile_Shop
class Mobile_Shop(Shop):
    def __init__(self, name):
        super().__init__(name)

    def show_menu(self):
        return "Mobiles, Accessories, and Gadgets Menu"

    def make_bill(self, order):
        return f"{self.name} - Bill: ${order}"

# Derived class Coffee_Shop
class Coffee_Shop(Shop):
    def __init__(self, name):
        super().__init__(name)

    def show_menu(self):
        return "Coffee and Beverages Menu\n1.coffe corner"

    def make_bill(self, order):
        return f"{self.name} - Bill: ${order}"

# Derived class Cake_Shop
class Cake_Shop(Shop):
    def __init__(self, name):
        super().__init__(name)

    def show_menu(self):
        return "Cakes and Pastries Menu"

    def make_bill(self, order):
        return f"{self.name} - Bill: ${order}"

# Polymorphic function to display menu and make a bill
def visit_shop(shop):
    print(shop.show_menu())
    order = 50             # Example order amount
    print(shop.make_bill(order))

# Create instances of different shop types
mobile_shop = Mobile_Shop("Gadget Galaxy")
coffee_shop = Coffee_Shop("Coffee Corner")
cake_shop = Cake_Shop("Sweet Delights")

# Visit and interact with each shop
visit_shop(mobile_shop)
visit_shop(coffee_shop)
visit_shop(cake_shop)




from tkinter import *
from tkinter import messagebox
import random
def no():
    messagebox.showinfo(' ','Thanks bro')
    quit()

def motionmouse(event):
    btnYes.place(x=random.randint(0,500),y=random.randint(0,500))

root=Tk()
root.geometry('500x500')
root.resizable(width=False,height=False)
root['bg']='#aa22aa'
label=Label(root,text='Are you guy', font='Arial 20 bold', bg='white')

label.pack()
btnYes=Button(root,text='No',font='Arial 20 bold')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>', motionmouse)

btnNo=Button(root,text='yes', font='Arial 20 bold' ,command=no)
btnNo.place(x=350,y=100)

